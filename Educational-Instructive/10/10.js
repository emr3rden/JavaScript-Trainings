// "Data Types in JavaScript"

// Primitive data types in JavaScript include:
// -Strings - Any data under single quote, double quote or backtick quote
// -Numbers - Integers, floats
// -Booleans - true or false value
// -Undefined - a declared variable without a value
// -Null - empty value or no value
// -Symbol - A unique value that can be generated by Symbol constructor

// Non-primitive data types in JavaScript includes:
// -Arrays
// -Objects

//////////////////////////////

// String
var fullName = "Emre Erden";
console.log(fullName); // Output: Emre Erden

// Number
var age = 22;
console.log(age); // Output: 25

// Boolean
var isMarried = false;
console.log(isMarried); // Output: false

// Undefined
var car;
console.log(car); // Output: undefined

// Null
var house = null;
console.log(house); // Output: null

// Array
var fruits = ["apple", "banana", "orange"];
console.log(fruits); // Output: ["apple", "banana", "orange"]

// Object
const person = {
  fullName: "Emre Erden",
  age: 22,
  isMarried: false,
};
console.log(person); // Output: {fullName: "Emre Erden", age: 22, isMarried: false}

//////////////////////////////

// Primitive data types are immutable(non-modifiable) data types. Once a primitive data type is created we cannot modify it.

let word = "JavaScript";
word[0] = "Y";
console.log(word); // Output: JavaScript

///////////////

// Primitive data types are compared by its values.

let num1 = 3;
let num2 = 3;
console.log(num1 == num2); // Output: true

let js = "JavaScript";
let py = "Python";
console.log(js == py); // Output: false

let lightOn = true;
let lightOff = false;
console.log(lightOn == lightOff); // Output: false

///////////////

// Non-primitive data types are modifiable or mutable.

let nums = [1, 2, 3];
nums[0] = 10;
console.log(nums); // Output: [10, 2, 3]

///////////////

// Non-primitive data types cannot be compared by value. Even if two non-primitive data types have the same properties and values, they are not strictly equal.

let numbers1 = [1, 2, 3];
let numbers2 = [1, 2, 3];
console.log(numbers1 == numbers2); // Output: false

let userOne = {
  name: "Emre",
  role: "Developer",
  country: "Turkey",
};
let userTwo = {
  name: "Emre",
  role: "Developer",
  country: "Turkey",
};
console.log(userOne == userTwo); // Output: false

///////////////

// Two objects are only strictly equal if they refer to the same underlying object.

let numbers3 = [1, 2, 3];
let numbers4 = numbers3;
console.log(numbers3 == numbers4); // Output: true

let userThree = {
  name: "Asabeneh",
  role: "teaching",
  country: "Finland",
};
let userFour = userThree;
console.log(userThree == userFour); // Output: true

//

const Emre = {
  id: 1,
  name: "Emre",
};

const EmreClone = Emre;

EmreClone.surname = "Erden";

console.log(Emre); // Output: {id: 1, name: "Emre", surname: "Erden"}
